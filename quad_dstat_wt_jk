#! /usr/bin/python
"""

quad_dstat_jk

This script takes the output from quad-aln-report and calculates the
D statistics with standard error using the jackknife.

Sam Vohr (svohr@soe.ucsc.edu)
Fri Jun 13 09:01:48 PDT 2014

"""

import sys
import argparse
import numpy

def read_quad_aln( rep_in ):
    """ Reads the table produced by quad-aln-report """
    counts_abba = list()
    counts_baba = list()
    for line in rep_in:
        items = line.split()
        # a little weird here, since quad-aln-report has an option to 
        # prepend a chromosome name we need to look at the last two columns
        # whatever column number they are.
        n_abba = int(items[-1])
        n_baba = int(items[-2])
        if (n_abba + n_baba) > 0:
            counts_abba.append(n_abba)
            counts_baba.append(n_baba)
    return counts_abba, counts_baba


def dstat_all_win( n_abba_win, n_baba_win ):
    """ Calculates 1 D-value for all windows """
    n_abba = n_abba_win.sum()
    n_baba = n_baba_win.sum()
    return (n_abba - n_baba) / float(n_abba + n_baba)

def wt_jk_estimator( n_blocks, d_global, n_abba, n_baba, \
                     snps_total, snps_block ):
    """ Delete-m_j jackknife estimator from Busing et al 
        "Delete-m Jackknife for Unequal m", returns estimator value and
        jackknifed D-statistic values. """
    jk_dstat_vals = numpy.zeros(n_blocks)
    jk_wt_dstat_sum = 0.0
    for j in range(n_blocks):
        mask = numpy.array([ x != j for x in range(n_blocks) ])
        jk_dstat_vals[j] = dstat_all_win( n_abba[mask], n_baba[mask] )
        jk_wt_dstat_sum += (1 - (snps_block[j]/snps_total)) * jk_dstat_vals[j] 
    return (n_blocks * d_global) - jk_wt_dstat_sum, jk_dstat_vals

def wt_jk_variance( n_blocks, d_global, jk_dstat_vals, jk_est, h_weights ):
    """ Delete-m_j jackknife variance estimator from Busing et al 
        "Delete-m Jackknife for Unequal m", returns estimate of variance """ 
    pseudo_val_est = (h_weights * d_global) - ((h_weights-1) * jk_dstat_vals)
    var_est_sum = 0.0
    for j in range(n_blocks):
        var_est_sum += (1/(h_weights[j]-1)) \
                        * ((pseudo_val_est[j] - jk_est) ** 2)
    return (1/n_blocks) * var_est_sum


def calc_dstat_wt_block_jackknife( counts_abba, counts_baba ):
    """ Based on Busing et al "Delete-m Jackknife for Unequal m"
        This is described in section 2.3 Delete-m_j jackknife.
        I'll preserve the notation and describe it in terms of our 
        application. """
    n_abba = numpy.array(counts_abba) 
    n_baba = numpy.array(counts_baba) 
    
    d_global = dstat_all_win(n_abba, n_baba)    # theta_hat_n
    n_blocks = len(n_abba)                      # g
    snps_total = n_abba.sum() + n_baba.sum()    # n
    snps_block = n_abba + n_baba                # m_j
    h_weights = snps_total / snps_block         # h

    # Estimate D 
    jk_est, jk_d_vals = wt_jk_estimator( n_blocks, d_global, n_abba, n_baba, \
                                         snps_total, snps_block )
    # Estimate variance
    jk_var_est = wt_jk_variance( n_blocks, d_global, jk_d_vals, \
                                 jk_est, h_weights )
    return jk_est, jk_var_est

def main(argv=None):
    """ Calculates D with standard error by jackknife """
    if argv is None:
        argv = sys.argv

    parser = argparse.ArgumentParser("")
#   parser.add_argument('-f', '--file', dest='in_file', type=str, \
#                        metavar='in.fa', help="Fasta input file.")
#   parser.add_argument('-n', dest='keep_ns', default=False, \
#                       action="store_true", help="")
    parser.add_argument('quad_file', metavar='QUAD_ALN_FILE', nargs='?' )
    args = parser.parse_args()

    # Read from standard in by default.
    rep_in = sys.stdin

    if args.quad_file is not None:
        rep_in = open(args.quad_file,'r')

    counts_abba, counts_baba = read_quad_aln( rep_in )

    jk_est, jk_var_est = \
        calc_dstat_wt_block_jackknife( counts_abba, counts_baba )

    jk_std_err = numpy.sqrt(jk_var_est)

    print "%f\t%f\n" % (jk_est, jk_std_err)

    return 0

if __name__ == "__main__":
    sys.exit(main())
